# -*- coding: utf-8 -*-
"""Tutorial For GroupBy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IW_VNGq-OSjTiEIkty0_CqpoJ8WzHek3

In Exploratry Data Analysis ,we often would like to analyze by some categories.In SQL the Groupby statement groups row that has the same category values into summary rows .In pandas SQL Groupby operation is performed the similary named groupby() .
This totrial is structured as follows :


1.   What is groupby() and how to access groups information ?
2.   The "groupby" process includes :split-apply-combine.
3.   Aggregation
4.   Tranformation
   
For demostration ,we will use Titanic dataset available on github
"""

import pandas as pd
data=pd.read_csv('train.csv')
data.head()

"""**1- What is groupby() and how to access groups information ?**

The simplist call must have a column name .In our example let's use the **Sex** column 
"""

data_groupby_sex=data.groupby('Sex')

"""By calling (type) on the result ,we can see that it returns **DataFrameGroupBy**"""

type(data_groupby_sex)

"""the groupby() function returns DataFrameGroupBy object, there are attributes and methods available for us to access groups information.
We can use ngroups attribute to get the number of groups 
"""

data_groupby_sex.ngroups

"""Use groups attribute to get groups object .Those integer numbers  in list are the row number """

data_groupby_sex.groups

"""We can use size() method to compute and display size groups """

data_groupby_sex.size()

"""you can use get_group method to retrieve one of the created group"""

data_female=data_groupby_sex.get_group('female')
data_female.head()

"""**2-The "groupby" process includes :split-apply-combine:**


1.   Splitting the data into grops . 
2.   Applying a function to each group independently .
3.   Combibing the result into a data structure .
in the apply step ,we might wish do one of the follwing 
**Aggregation :** compute a summary static for each group for example sum,mean or count.

**With Column:**
 we can perform aggregation on a spesific column 



"""

data.groupby('Sex').Age.max()

"""**With agg () method:**

There's a method called agg() it allows us to specify multiple aggregation functions at once 
"""

data.groupby('Sex').Age.agg(['max','min','mean','count','median'])

"""sometimes ,you prefer to use a custom column name """

data.groupby('Sex').Age.agg(
    sex_max=('max'),
    sex_min=('min'),
)

"""if you would like to use a custom aggregation function like this ,so as we can see below the function return True if the mean is larger than 29 or False otherwise"""

def categorize(x):
  m=x.mean()
  return True if m >29 else False 
data.groupby('Sex').Age.agg(['max','mean',categorize])

"""You can also use a lambda expression"""

data.groupby('Sex').Age.agg(['max','mean',lambda x:True if x.mean()> 29  else False])

"""**Without column :**

we don't actually have a specify column like Age .Without column ,it will perform aggreration function across all of the numeric columns
"""

data.groupby('Sex').mean()

"""Similary ,we can also call agg() without a column"""

data.groupby('Sex').agg(['mean','max'])

data.groupby('Sex').Age.apply(print)

"""**4-Filtration:**

filtration is a process that discard some groups .
Let's take a look at how to discard data that belongs to groups ,first we group the data by Cabin, we take a quick look at the size for each group.
"""

data.groupby('Cabin').size()

"""Now let's filter data to return all passengers that live in a cabin has >= 4 people ,to do that we use filter method with a lambda expression"""

data.groupby('Cabin').filter(lambda x:len(x) >=3)

"""**Grouping by multiple categories**:

So far , we have been passing a single label to groupby() by group data based on column .Instead of a label ,we can also pass a list of labels 
"""

# creating a subset
data_subset=data.loc[:,['Sex','Pclass','Age','Fare']]
# Group by based on multiple categorires
data_subset.groupby(['Sex','Pclass']).mean()

"""**Resetting Index with reset_index:**

we can call reset_index () on the DataFrame to reset them 
"""

data_subset.groupby(['Sex','Pclass']).mean().reset_index()

data_subset.groupby(['Sex', 'Pclass'], as_index=True).mean()

"""There is a more effective way using the as_index argument ,if it is set to False the group labels are represented as columns instead of index"""

data_subset.groupby(['Sex','Pclass'], as_index=False).mean()

"""**Handling missing value :**

the groupby () function ignores the missing values by default ,Let's first create some missing values in the Sex column 
"""

import numpy as np
#Creating missing value in the Sex column 
data_subset.iloc[80:100,0]=np.NaN
data_subset.isna().sum()

"""When calculating the mean value for each category in the Sex column ,we won't get any information about the missing values """

data_subset.groupby(['Sex','Pclass']).mean()

"""In some cases , we need to get an overview of the missing values.We can set the dropna () argument to False to include mising value """

data_subset.groupby(['Sex','Pclass'] ,dropna= False).mean()

"""**`Conclusion : `**

GroupBy() function is one of the most widely used functions in data analysis .It's really important because of it's apility to aggregate and filter data in each group .
"""